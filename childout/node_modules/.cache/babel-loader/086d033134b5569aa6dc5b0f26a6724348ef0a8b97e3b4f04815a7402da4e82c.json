{"ast":null,"code":"// src/serviceWorkerRegistration.js\n\n// Проверка на поддержку сервисных работников\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] является записями IPv6 для localhost\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.0/8 является записями IPv4 для localhost\nwindow.location.port === '3000' // смените порт, если нужно\n);\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log('Этот веб-приложение работает под PWA и готово к офлайн-режиму.');\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            console.log('Новые обновления доступны. Пожалуйста, обновите страницу.');\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            console.log('Контент кэша доступен офлайн.');\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Ошибка регистрации сервисного работника:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('Нет подключения к интернету. Служебный работник не может быть зарегистрирован.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.getRegistrations().then(registrations => {\n      for (let registration of registrations) {\n        registration.unregister();\n      }\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","port","register","config","navigator","publicUrl","URL","process","env","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","getRegistrations","registrations"],"sources":["C:/Users/kir/WebstormProjects/childout/src/serviceWorkerRegistration.js"],"sourcesContent":["// src/serviceWorkerRegistration.js\r\n\r\n// Проверка на поддержку сервисных работников\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] является записями IPv6 для localhost\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 является записями IPv4 для localhost\r\n    window.location.port === '3000' // смените порт, если нужно\r\n);\r\n\r\nexport function register(config) {\r\n    if ('serviceWorker' in navigator) {\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                checkValidServiceWorker(swUrl, config);\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'Этот веб-приложение работает под PWA и готово к офлайн-режиму.'\r\n                    );\r\n                });\r\n            } else {\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            console.log(\r\n                                'Новые обновления доступны. Пожалуйста, обновите страницу.'\r\n                            );\r\n\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            console.log('Контент кэша доступен офлайн.');\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Ошибка регистрации сервисного работника:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'Нет подключения к интернету. Служебный работник не может быть зарегистрирован.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.getRegistrations().then(registrations => {\r\n            for (let registration of registrations) {\r\n                registration.unregister();\r\n            }\r\n        });\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}