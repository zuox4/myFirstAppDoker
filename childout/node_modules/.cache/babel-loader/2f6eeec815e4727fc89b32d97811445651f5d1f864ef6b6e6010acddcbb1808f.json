{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kir\\\\WebstormProjects\\\\childout\\\\src\\\\components\\\\CardOut.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardOut({\n  msg,\n  order\n}) {\n  function formatMessage(message) {\n    const parts = message.split(' ');\n    const childName = parts[0] + ' ' + parts[1];\n    const timeOut = formatDateTime(parts[parts.length - 1]);\n    const dateOut = Date.parse(parts[parts.length - 1]);\n    if (isNaN(dateOut)) {\n      console.error(\"Неверный формат даты:\", parts[parts.length - 1]);\n      return {\n        name: childName,\n        timeOut: \"Невалидная дата\",\n        confirmOut: \"Ошибка\"\n      };\n    }\n    const dateNow = Date.now();\n    const confirmOut = dateOut <= dateNow ? 'Выход разрешен' : 'Выход запрещен';\n    return {\n      name: childName,\n      timeOut,\n      confirmOut\n    };\n  }\n  function formatDateTime(dateTimeString) {\n    const parsedDate = Date.parse(dateTimeString);\n    const date = new Date(parsedDate);\n\n    // Параметры форматирования\n    const options = {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false // 24-часовой формат\n    };\n    return date.toLocaleString('ru-RU', options).replace(',', ' в');\n  }\n  const {\n    name,\n    timeOut,\n    confirmOut\n  } = formatMessage(msg);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: timeOut\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: confirmOut\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_c = CardOut;\nexport default CardOut;\nvar _c;\n$RefreshReg$(_c, \"CardOut\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","CardOut","msg","order","formatMessage","message","parts","split","childName","timeOut","formatDateTime","length","dateOut","Date","parse","isNaN","console","error","name","confirmOut","dateNow","now","dateTimeString","parsedDate","date","options","day","month","year","hour","minute","hour12","toLocaleString","replace","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kir/WebstormProjects/childout/src/components/CardOut.js"],"sourcesContent":["import React from \"react\";\r\n\r\nfunction CardOut({ msg, order }) {\r\n    function formatMessage(message) {\r\n        const parts = message.split(' ');\r\n        const childName = parts[0] + ' ' + parts[1];\r\n        const timeOut = formatDateTime(parts[parts.length - 1]);\r\n        const dateOut = Date.parse(parts[parts.length - 1]);\r\n\r\n        if (isNaN(dateOut)) {\r\n            console.error(\"Неверный формат даты:\", parts[parts.length - 1]);\r\n            return { name: childName, timeOut: \"Невалидная дата\", confirmOut: \"Ошибка\" };\r\n        }\r\n\r\n        const dateNow = Date.now();\r\n        const confirmOut = dateOut <= dateNow ? 'Выход разрешен' : 'Выход запрещен';\r\n\r\n        return { name: childName, timeOut, confirmOut };\r\n    }\r\n\r\n    function formatDateTime(dateTimeString) {\r\n        const parsedDate = Date.parse(dateTimeString);\r\n        const date = new Date(parsedDate);\r\n\r\n        // Параметры форматирования\r\n        const options = {\r\n            day: '2-digit',\r\n            month: '2-digit',\r\n            year: 'numeric',\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n            hour12: false, // 24-часовой формат\r\n        };\r\n\r\n        return date.toLocaleString('ru-RU', options).replace(',', ' в');\r\n    }\r\n\r\n    const { name, timeOut, confirmOut } = formatMessage(msg);\r\n\r\n    return (\r\n        <div className=\"Card\">\r\n            <h2>{name}</h2>\r\n            <p>{timeOut}</p>\r\n            <p>{confirmOut}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardOut;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,OAAOA,CAAC;EAAEC,GAAG;EAAEC;AAAM,CAAC,EAAE;EAC7B,SAASC,aAAaA,CAACC,OAAO,EAAE;IAC5B,MAAMC,KAAK,GAAGD,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;IAChC,MAAMC,SAAS,GAAGF,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,KAAK,CAAC,CAAC,CAAC;IAC3C,MAAMG,OAAO,GAAGC,cAAc,CAACJ,KAAK,CAACA,KAAK,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC;IACvD,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACR,KAAK,CAACA,KAAK,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC;IAEnD,IAAII,KAAK,CAACH,OAAO,CAAC,EAAE;MAChBI,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEX,KAAK,CAACA,KAAK,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC;MAC/D,OAAO;QAAEO,IAAI,EAAEV,SAAS;QAAEC,OAAO,EAAE,iBAAiB;QAAEU,UAAU,EAAE;MAAS,CAAC;IAChF;IAEA,MAAMC,OAAO,GAAGP,IAAI,CAACQ,GAAG,CAAC,CAAC;IAC1B,MAAMF,UAAU,GAAGP,OAAO,IAAIQ,OAAO,GAAG,gBAAgB,GAAG,gBAAgB;IAE3E,OAAO;MAAEF,IAAI,EAAEV,SAAS;MAAEC,OAAO;MAAEU;IAAW,CAAC;EACnD;EAEA,SAAST,cAAcA,CAACY,cAAc,EAAE;IACpC,MAAMC,UAAU,GAAGV,IAAI,CAACC,KAAK,CAACQ,cAAc,CAAC;IAC7C,MAAME,IAAI,GAAG,IAAIX,IAAI,CAACU,UAAU,CAAC;;IAEjC;IACA,MAAME,OAAO,GAAG;MACZC,GAAG,EAAE,SAAS;MACdC,KAAK,EAAE,SAAS;MAChBC,IAAI,EAAE,SAAS;MACfC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE,KAAK,CAAE;IACnB,CAAC;IAED,OAAOP,IAAI,CAACQ,cAAc,CAAC,OAAO,EAAEP,OAAO,CAAC,CAACQ,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC;EACnE;EAEA,MAAM;IAAEf,IAAI;IAAET,OAAO;IAAEU;EAAW,CAAC,GAAGf,aAAa,CAACF,GAAG,CAAC;EAExD,oBACIF,OAAA;IAAKkC,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACjBnC,OAAA;MAAAmC,QAAA,EAAKjB;IAAI;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACfvC,OAAA;MAAAmC,QAAA,EAAI1B;IAAO;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBvC,OAAA;MAAAmC,QAAA,EAAIhB;IAAU;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEd;AAACC,EAAA,GA5CQvC,OAAO;AA8ChB,eAAeA,OAAO;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}