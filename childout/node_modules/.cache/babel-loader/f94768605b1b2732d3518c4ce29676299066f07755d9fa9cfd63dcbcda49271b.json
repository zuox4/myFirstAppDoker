{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kir\\\\WebstormProjects\\\\childout\\\\src\\\\components\\\\CardOut.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardOut({\n  msg\n}) {\n  _s();\n  const [messageData, setMessageData] = useState({});\n  const [dateO, setDateO] = useState('');\n  useEffect(() => {\n    setMessageData(formatMessage(msg));\n  }, [msg]);\n  function parseDate(dateString) {\n    // Удаляем 'Z' в конце строки, если он присутствует\n    if (dateString.endsWith('Z')) {\n      dateString = dateString.slice(0, -1);\n    }\n    const [datePart, timePart] = dateString.split('T');\n    const [year, month, day] = datePart.split('-').map(Number);\n    const [hours, minutes] = timePart.split(':').map(Number);\n\n    // Создаем дату в UTC\n    const utcDate = new Date(Date.UTC(year, month - 1, day, hours, minutes));\n\n    // Добавляем 3 часа для часового пояса +3\n    const localDate = new Date(utcDate.getTime() + 3 * 60 * 60 * 1000);\n    return localDate;\n  }\n  function formatMessage(message) {\n    const parts = message.split(' ');\n    const childName = parts[0] + ' ' + parts[1];\n    const timeString = parts[parts.length - 1];\n    const parsedDate = parseDate(timeString);\n    setDateO(parsedDate.toLocaleString('ru-RU', {\n      timeZone: 'Europe/Moscow' // Учитываем московское время\n    }));\n    return {\n      childName,\n      date: parsedDate\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: messageData.childName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0414\\u0430\\u0442\\u0430 \\u0438 \\u0432\\u0440\\u0435\\u043C\\u044F: \", dateO]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(CardOut, \"ehc+NfICv9v1t81FzHyx85tk+VQ=\");\n_c = CardOut;\nexport default CardOut;\nvar _c;\n$RefreshReg$(_c, \"CardOut\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CardOut","msg","_s","messageData","setMessageData","dateO","setDateO","formatMessage","parseDate","dateString","endsWith","slice","datePart","timePart","split","year","month","day","map","Number","hours","minutes","utcDate","Date","UTC","localDate","getTime","message","parts","childName","timeString","length","parsedDate","toLocaleString","timeZone","date","children","loading","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kir/WebstormProjects/childout/src/components/CardOut.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction CardOut({ msg }) {\r\n    const [messageData, setMessageData] = useState({});\r\n    const [dateO, setDateO] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n        setMessageData(formatMessage(msg));\r\n    }, [msg]);\r\n\r\n    function parseDate(dateString) {\r\n        // Удаляем 'Z' в конце строки, если он присутствует\r\n        if (dateString.endsWith('Z')) {\r\n            dateString = dateString.slice(0, -1);\r\n        }\r\n\r\n        const [datePart, timePart] = dateString.split('T');\r\n        const [year, month, day] = datePart.split('-').map(Number);\r\n        const [hours, minutes] = timePart.split(':').map(Number);\r\n\r\n        // Создаем дату в UTC\r\n        const utcDate = new Date(Date.UTC(year, month - 1, day, hours, minutes));\r\n\r\n        // Добавляем 3 часа для часового пояса +3\r\n        const localDate = new Date(utcDate.getTime() + 3 * 60 * 60 * 1000);\r\n\r\n        return localDate;\r\n    }\r\n\r\n    function formatMessage(message) {\r\n        const parts = message.split(' ');\r\n        const childName = parts[0] + ' ' + parts[1];\r\n        const timeString = parts[parts.length - 1];\r\n        const parsedDate = parseDate(timeString);\r\n\r\n        setDateO(parsedDate.toLocaleString('ru-RU', {\r\n            timeZone: 'Europe/Moscow', // Учитываем московское время\r\n        }));\r\n\r\n        return {\r\n            childName,\r\n            date: parsedDate,\r\n        };\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {loading ? (\r\n                <p>Загрузка...</p>\r\n            ) : (\r\n                <div>\r\n                    <h3>{messageData.childName}</h3>\r\n                    <p>Дата и время: {dateO}</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardOut;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}