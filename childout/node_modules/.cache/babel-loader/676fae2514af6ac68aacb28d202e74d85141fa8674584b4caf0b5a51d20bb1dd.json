{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kir\\\\WebstormProjects\\\\childout\\\\src\\\\components\\\\CardOut.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardOut({\n  msg,\n  order\n}) {\n  function parseDate(dateString) {\n    // Проверяем, заканчивается ли строка буквой 'Z'\n    if (dateString.endsWith('Z')) {\n      dateString = dateString.slice(0, -1); // Убираем 'Z'\n    }\n\n    // Разбиваем строку на дату и время\n    const [datePart, timePart] = dateString.split('T');\n    const [year, month, day] = datePart.split('-').map(Number);\n    const [hours, minutes] = timePart.split(':').map(Number);\n\n    // Создаём объект Date, учитывая UTC\n    const date = new Date(Date.UTC(year, month - 1, day, hours, minutes));\n    return date;\n  }\n  function formatMessage(message) {\n    const parts = message.split(' ');\n    const childName = parts[0] + ' ' + parts[1]; // Предполагаем, что имя всегда первые два слова\n    const timeString = parts[parts.length - 1]; // Последний элемент - это строка даты\n    const timeOut = formatDateTime(timeString);\n\n    // Создаем объект Date из временной строки\n    const dateOut = new Date(timeString).getTime(); // Получаем временную метку в миллисекундах\n    const dateNow = Date.now(); // Текущая метка времени\n\n    return {\n      name: childName,\n      timeOut: timeOut,\n      confirmOut: dateOut <= dateNow ? 'Выход разрешен' : 'Выход запрещен'\n    };\n  }\n  function formatDateTime(dateTimeString) {\n    // Создаем объект даты из строки\n    const date = parseDate(dateTimeString); // Изменено, чтобы использовать вашу функцию parseDate\n    // Извлекаем необходимые компоненты даты и времени\n    const day = String(date.getUTCDate()).padStart(2, '0'); // Используем getUTCDate\n    const month = String(date.getUTCMonth() + 1).padStart(2, '0'); // Используем getUTCMonth\n    const hours = String(date.getUTCHours()).padStart(2, '0'); // Используем getUTCHours\n    const minutes = String(date.getUTCMinutes()).padStart(2, '0'); // Используем getUTCMinutes\n    // Формируем строку в нужном формате\n    return `${day}.${month} в ${hours}:${minutes}`;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"CardOut\",\n    style: {\n      backgroundColor: formatMessage(msg).confirmOut === \"Выход разрешен\" ? 'green' : 'red',\n      order: -order\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"\\u0418\\u043C\\u044F \\u0443\\u0447\\u0435\\u043D\\u0438\\u043A\\u0430: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          textTransform: 'uppercase'\n        },\n        children: formatMessage(msg).name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"\\u0412\\u0440\\u0435\\u043C\\u044F \\u0432\\u044B\\u0445\\u043E\\u0434\\u0430: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatMessage(msg).timeOut\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        textTransform: 'uppercase',\n        marginTop: '11px',\n        fontWeight: 'bold'\n      },\n      children: formatMessage(msg).confirmOut\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_c = CardOut;\nexport default CardOut;\nvar _c;\n$RefreshReg$(_c, \"CardOut\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CardOut","msg","order","parseDate","dateString","endsWith","slice","datePart","timePart","split","year","month","day","map","Number","hours","minutes","date","Date","UTC","formatMessage","message","parts","childName","timeString","length","timeOut","formatDateTime","dateOut","getTime","dateNow","now","name","confirmOut","dateTimeString","String","getUTCDate","padStart","getUTCMonth","getUTCHours","getUTCMinutes","className","style","backgroundColor","children","textTransform","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/kir/WebstormProjects/childout/src/components/CardOut.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\n\r\nfunction CardOut({msg, order}) {\r\n    function parseDate(dateString) {\r\n        // Проверяем, заканчивается ли строка буквой 'Z'\r\n        if (dateString.endsWith('Z')) {\r\n            dateString = dateString.slice(0, -1); // Убираем 'Z'\r\n        }\r\n\r\n        // Разбиваем строку на дату и время\r\n        const [datePart, timePart] = dateString.split('T');\r\n        const [year, month, day] = datePart.split('-').map(Number);\r\n        const [hours, minutes] = timePart.split(':').map(Number);\r\n\r\n        // Создаём объект Date, учитывая UTC\r\n        const date = new Date(Date.UTC(year, month - 1, day, hours, minutes));\r\n        return date;\r\n    }\r\n    function formatMessage(message) {\r\n        const parts = message.split(' ');\r\n        const childName = parts[0] + ' ' + parts[1]; // Предполагаем, что имя всегда первые два слова\r\n        const timeString = parts[parts.length - 1]; // Последний элемент - это строка даты\r\n        const timeOut = formatDateTime(timeString);\r\n\r\n        // Создаем объект Date из временной строки\r\n        const dateOut = new Date(timeString).getTime(); // Получаем временную метку в миллисекундах\r\n        const dateNow = Date.now(); // Текущая метка времени\r\n\r\n        return {\r\n            name: childName,\r\n            timeOut: timeOut,\r\n            confirmOut: dateOut <= dateNow ? 'Выход разрешен' : 'Выход запрещен'\r\n        };\r\n    }\r\n\r\n    function formatDateTime(dateTimeString) {\r\n        // Создаем объект даты из строки\r\n        const date = parseDate(dateTimeString); // Изменено, чтобы использовать вашу функцию parseDate\r\n        // Извлекаем необходимые компоненты даты и времени\r\n        const day = String(date.getUTCDate()).padStart(2, '0');  // Используем getUTCDate\r\n        const month = String(date.getUTCMonth() + 1).padStart(2, '0'); // Используем getUTCMonth\r\n        const hours = String(date.getUTCHours()).padStart(2, '0'); // Используем getUTCHours\r\n        const minutes = String(date.getUTCMinutes()).padStart(2, '0'); // Используем getUTCMinutes\r\n        // Формируем строку в нужном формате\r\n        return `${day}.${month} в ${hours}:${minutes}`;\r\n    }\r\n    return(\r\n        <div className=\"CardOut\" style={{backgroundColor:(formatMessage(msg).confirmOut===\"Выход разрешен\")?'green':'red', order:-order}}>\r\n                <h4>Имя ученика: <span style={{textTransform:'uppercase'}}>{formatMessage(msg).name}</span></h4>\r\n                <h4>Время выхода: <span>{formatMessage(msg).timeOut}</span></h4>\r\n                <span style={{textTransform:'uppercase', marginTop:'11px', fontWeight:'bold'}}>{formatMessage(msg).confirmOut}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardOut;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}