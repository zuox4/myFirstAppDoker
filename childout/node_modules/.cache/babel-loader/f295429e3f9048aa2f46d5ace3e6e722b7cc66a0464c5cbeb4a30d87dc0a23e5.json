{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kir\\\\WebstormProjects\\\\childout\\\\src\\\\components\\\\CardOut.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardOut({\n  msg,\n  order\n}) {\n  _s();\n  const [messageData, setMessageData] = useState({});\n  const [dateO, setDateO] = useState('');\n  const [count, setCount] = useState(0);\n  const [isRunning, setIsRunning] = useState(true);\n  useEffect(() => {\n    let interval;\n    if (isRunning) {\n      // Устанавливаем интервал для обновления компонента каждую секунду\n      interval = setInterval(() => {\n        setCount(prevCount => prevCount + 1);\n      }, 1000);\n    }\n\n    // Очистка интервала при размонтировании или изменении isRunning\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [count, setIsRunning()]); // Используем isRunning как зависимость\n  useEffect(() => {\n    setMessageData(formatMessage(msg));\n  }, [msg]);\n  function parseDate(dateString) {\n    // Удаляем 'Z' в конце строки, если он присутствует\n    if (dateString.endsWith('Z')) {\n      dateString = dateString.slice(0, -1);\n    }\n    const [datePart, timePart] = dateString.split('T');\n    const [year, month, day] = datePart.split('-').map(Number);\n    const [hours, minutes] = timePart.split(':').map(Number);\n\n    // Возвращаем дату в UTC\n    return new Date(Date.UTC(year, month - 1, day, hours, minutes));\n  }\n  function formatMessage(message) {\n    const parts = message.split(' ');\n    const childName = parts[0] + ' ' + parts[1];\n    const timeString = parts[parts.length - 1];\n    const parsedDate = parseDate(timeString); // Парсим дату\n\n    const dateOut = parsedDate.getTime();\n    const dateNow = Date.now(); // Используем Date.now() для получения текущего времени в миллисекундах\n\n    // Устанавливаем состояние для отображения даты и текущего времени\n    setDateO(`${dateOut}; ${dateNow}`);\n\n    // Форматируем сообщение на основе сравнения времени\n    return {\n      name: childName,\n      timeOut: formatDateTime(parsedDate),\n      // Используем уже распарсенную дату\n      confirmOut: dateOut <= dateNow + 3 * 60 * 60 * 1000 ? 'Выход разрешен' : 'Выход запрещен'\n    };\n  }\n  function formatDateTime(date) {\n    const day = String(date.getUTCDate()).padStart(2, '0');\n    const month = String(date.getUTCMonth() + 1).padStart(2, '0');\n    const hours = String(date.getUTCHours()).padStart(2, '0');\n    const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n    return `${day}.${month} в ${hours}:${minutes}`;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"CardOut\",\n    style: {\n      backgroundColor: messageData.confirmOut === \"Выход разрешен\" ? 'green' : 'red',\n      order: -order\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: dateO\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"\\u0418\\u043C\\u044F \\u0443\\u0447\\u0435\\u043D\\u0438\\u043A\\u0430: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          textTransform: 'uppercase'\n        },\n        children: messageData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"\\u0412\\u0440\\u0435\\u043C\\u044F \\u0432\\u044B\\u0445\\u043E\\u0434\\u0430: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: messageData.timeOut\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        textTransform: 'uppercase',\n        marginTop: '11px',\n        fontWeight: 'bold'\n      },\n      children: messageData.confirmOut\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n_s(CardOut, \"ZQot3QMfBYMuhYS4uY8LCQa4IWc=\");\n_c = CardOut;\nexport default CardOut;\nvar _c;\n$RefreshReg$(_c, \"CardOut\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CardOut","msg","order","_s","messageData","setMessageData","dateO","setDateO","count","setCount","isRunning","setIsRunning","interval","setInterval","prevCount","clearInterval","formatMessage","parseDate","dateString","endsWith","slice","datePart","timePart","split","year","month","day","map","Number","hours","minutes","Date","UTC","message","parts","childName","timeString","length","parsedDate","dateOut","getTime","dateNow","now","name","timeOut","formatDateTime","confirmOut","date","String","getUTCDate","padStart","getUTCMonth","getUTCHours","getUTCMinutes","className","style","backgroundColor","children","fileName","_jsxFileName","lineNumber","columnNumber","textTransform","marginTop","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/kir/WebstormProjects/childout/src/components/CardOut.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction CardOut({ msg, order }) {\r\n    const [messageData, setMessageData] = useState({});\r\n    const [dateO, setDateO] = useState('');\r\n    const [count, setCount] = useState(0);\r\n    const [isRunning, setIsRunning] = useState(true);\r\n    useEffect(() => {\r\n        let interval;\r\n\r\n        if (isRunning) {\r\n            // Устанавливаем интервал для обновления компонента каждую секунду\r\n            interval = setInterval(() => {\r\n                setCount(prevCount => prevCount + 1);\r\n\r\n            }, 1000);\r\n        }\r\n\r\n        // Очистка интервала при размонтировании или изменении isRunning\r\n        return () => {\r\n            if (interval) {\r\n                clearInterval(interval);\r\n\r\n            }\r\n        };\r\n    }, [count, setIsRunning()]); // Используем isRunning как зависимость\r\n    useEffect(() => {\r\n        setMessageData(formatMessage(msg));\r\n    }, [msg]);\r\n\r\n    function parseDate(dateString) {\r\n        // Удаляем 'Z' в конце строки, если он присутствует\r\n        if (dateString.endsWith('Z')) {\r\n            dateString = dateString.slice(0, -1);\r\n        }\r\n\r\n        const [datePart, timePart] = dateString.split('T');\r\n        const [year, month, day] = datePart.split('-').map(Number);\r\n        const [hours, minutes] = timePart.split(':').map(Number);\r\n\r\n        // Возвращаем дату в UTC\r\n        return new Date(Date.UTC(year, month - 1, day, hours, minutes));\r\n    }\r\n\r\n    function formatMessage(message) {\r\n        const parts = message.split(' ');\r\n        const childName = parts[0] + ' ' + parts[1];\r\n        const timeString = parts[parts.length - 1];\r\n        const parsedDate = parseDate(timeString); // Парсим дату\r\n\r\n        const dateOut = parsedDate.getTime();\r\n        const dateNow = Date.now(); // Используем Date.now() для получения текущего времени в миллисекундах\r\n\r\n        // Устанавливаем состояние для отображения даты и текущего времени\r\n        setDateO(`${dateOut}; ${dateNow}`);\r\n\r\n        // Форматируем сообщение на основе сравнения времени\r\n        return {\r\n            name: childName,\r\n            timeOut: formatDateTime(parsedDate), // Используем уже распарсенную дату\r\n            confirmOut: dateOut <= dateNow + 3 * 60 * 60 * 1000 ? 'Выход разрешен' : 'Выход запрещен',\r\n        };\r\n    }\r\n\r\n    function formatDateTime(date) {\r\n        const day = String(date.getUTCDate()).padStart(2, '0');\r\n        const month = String(date.getUTCMonth() + 1).padStart(2, '0');\r\n        const hours = String(date.getUTCHours()).padStart(2, '0');\r\n        const minutes = String(date.getUTCMinutes()).padStart(2, '0');\r\n\r\n        return `${day}.${month} в ${hours}:${minutes}`;\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"CardOut\"\r\n             style={{ backgroundColor: messageData.confirmOut === \"Выход разрешен\" ? 'green' : 'red', order: -order }}>\r\n            <span>{dateO}</span>\r\n            <h4>Имя ученика: <span style={{ textTransform: 'uppercase' }}>{messageData.name}</span></h4>\r\n            <h4>Время выхода: <span>{messageData.timeOut}</span></h4>\r\n            <span style={{\r\n                textTransform: 'uppercase',\r\n                marginTop: '11px',\r\n                fontWeight: 'bold'\r\n            }}>{messageData.confirmOut}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardOut;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}